<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mingslife.dao.EventMapper">
  <resultMap id="BaseResultMap" type="com.mingslife.model.Event">
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="subject" property="subject" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="remind_date" property="remindDate" jdbcType="TIMESTAMP" />
    <result column="is_reminded" property="isReminded" jdbcType="BIT" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="create_operator" property="createOperator" jdbcType="INTEGER" />
    <result column="update_operator" property="updateOperator" jdbcType="INTEGER" />
  </resultMap>
  <sql id="BaseColumnList">
    id, user_id, subject, content, remind_date, is_reminded,
    create_date, update_date, create_operator, update_operator
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
    select
      <include refid="BaseColumnList" />
    from events
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from events
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.mingslife.model.Event" useGeneratedKeys="true" keyProperty="id">
    insert into events (
      id, user_id, subject,
      content, remind_date, is_reminded,
      create_date, update_date, create_operator,
      update_operator
    ) values (
      #{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{subject,jdbcType=VARCHAR},
      #{content,jdbcType=VARCHAR}, #{remindDate,jdbcType=TIMESTAMP}, #{isReminded,jdbcType=BIT},
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, #{createOperator,jdbcType=INTEGER},
      #{updateOperator,jdbcType=INTEGER}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.mingslife.model.Event">
    insert into events
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="subject != null">
        subject,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="remindDate != null">
        remind_date,
      </if>
      <if test="isReminded != null">
        is_reminded,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="createOperator != null">
        create_operator,
      </if>
      <if test="updateOperator != null">
        update_operator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="subject != null">
        #{subject,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="remindDate != null">
        #{remindDate,jdbcType=TIMESTAMP},
      </if>
      <if test="isReminded != null">
        #{isReminded,jdbcType=BIT},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createOperator != null">
        #{createOperator,jdbcType=INTEGER},
      </if>
      <if test="updateOperator != null">
        #{updateOperator,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.mingslife.model.Event">
    update events
    <set>
      <if test="uuid != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
    </set>
    <set>
      <if test="uuid != null">
        subject = #{subject,jdbcType=VARCHAR},
      </if>
    </set>
    <set>
      <if test="uuid != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
    </set>
    <set>
      <if test="uuid != null">
        remind_date = #{remindDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <set>
      <if test="uuid != null">
        is_reminded = #{isReminded,jdbcType=BIT},
      </if>
    </set>
    <set>
      <if test="uuid != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <set>
      <if test="uuid != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <set>
      <if test="uuid != null">
        create_operator = #{createOperator,jdbcType=INTEGER},
      </if>
    </set>
    <set>
      <if test="uuid != null">
        update_operator = #{updateOperator,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mingslife.model.Event">
    update events
    set
      user_id = #{userId,jdbcType=INTEGER},
      subject = #{subject,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      remind_date = #{remindDate,jdbcType=TIMESTAMP},
      is_reminded = #{isReminded,jdbcType=BIT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      create_operator = #{createOperator,jdbcType=INTEGER},
      update_operator = #{updateOperator,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="select" resultMap="BaseResultMap">
    select
    <if test="parameters != null">
      ${parameters}
    </if>
    <if test="parameters == null">
      *
    </if>
    from events
    <if test="condition != null">
      where ${condition}
    </if>
    <if test="order != null and sort != null">
      order by ${order} ${sort}
    </if>
    <if test="offset != -1 and limit != -1">
      limit #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
    </if>
  </select>
  <select id="count" resultType="long">
    select count(
    <if test="isDistinct == true">
      distinct
    </if>
    <if test="parameters != null">
      ${parameters}
    </if>
    <if test="parameters == null">
      *
    </if>
    ) from events
    <if test="condition != null">
      where ${condition}
    </if>
  </select>
  <select id="sum" resultType="double">
    select sum(
    <if test="isDistinct == true">
      distinct
    </if>
    ${parameter}) from events
    <if test="condition != null">
      where ${condition}
    </if>
    <if test="order != null and sort != null">
      order by ${order} ${sort}
    </if>
    <if test="offset != -1 and limit != -1">
      limit #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
    </if>
  </select>
  <select id="find" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
    select ${parameters} from events where id = #{id,jdbcType=INTEGER}
  </select>
</mapper>
